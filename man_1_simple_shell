.TH man 1 "14 April 2020" "1.0" "simple_shell"
.SH NAME
hsh \- Command Line Interpreter
.SH SYNOPSIS
.B
hsh [command_string | file]
.SH DESCRIPTION
.B
<sh | simple_shell>


is an command language interpreter that executes \
commmands read from the standard input or from a file.
.B
hsh
works with some features taked from
.B
POSIX shell\.

.PP
This shell executes binaries files that are inside
.B
$PATH
directories.
.PP
.B
Shell
is the program that is running when user logs into the system \
(The user can select a different shell with the chsh(1) command). \
The shell implements a language that has flow control constructs,  \
a macro facility that provides a variaty of features in addition to data storage. \
It also works in two modes, those are
.B
[Interactive & Non-Interactive]
That is, commands can be typed directly \
to the running shell or can be put into a file and the file can be executed \
directly by the shell.

.B
Search and Execution
.PP
There are three types of commands: shell functions, builtin commands, and \
normal programs -- and the command is searched for (by name) in that order. \
They each are executed in a different way.

Shell builtins are executed internally to the shell, without spawning a new \
process.

Otherwise, if the command name doesn't match a function or builtin, the
command is searched for as a normal program in the file system (as
described in the next section).  When a normal program is executed, the
shell runs the program, passing the arguments and the environment to the
program.  If the program is not a normal executable file (i.e., if it does
not begin with the "magic number" whose ASCII representation is "#!", so
execve(2) returns ENOEXEC then) the shell will interpret the program in a
subshell.  The child shell will reinitialize itself in this case, so that
the effect will be as if a new shell had been invoked to handle the ad-hoc
shell script, except that the location of hashed commands located in the
parent shell will be remembered by the child.

.B
Path Search

.PP
When locating a command, the shell first looks to see if it has a shell
function by that name.  Then it looks for a builtin command by that name.
If a builtin command is not found, one of two things happen:

     1.   Command names containing a slash are simply executed without performing any searches.

     2.   The shell searches each entry in PATH in turn for the command. The value of the PATH variable should be a series of entries separated by
          colons.  Each entry consists of a directory name.  The current directory may be indicated implicitly by an empty directory name, or explicitly by a single period.
.B
(Taked from manual sh(1))

.B
Exit Status

.SH It by default exits with status 0. 
.B [Options] [More Options]
.br

.B #include <stdio.h>
.br
.B #include <stdlib.h>
.br
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.br
.B #include <sys/wait.h>
.br
.B #include <string.h>
.br
.B #include <sys/stat.h>
.br
.B #include <fcntl.h>
.br
.SH SEE ALSO

hsh(1), sh(1), echo(1), hsh(1), environ(7)

.SH BUGS

It does not detect status for exit built-in.

.SH AUTHORS
Esteban De La Hoz
.B
(1542@holbertonschool.com)
.PP
Jose Vallejo
.B
(1545@holbertonschool.com)
